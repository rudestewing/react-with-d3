import {
  bin,
  csv,
  extent,
  scaleLinear,
  scaleTime,
  timeMonth,
  timeMonths,
  sum,
  max,
} from 'd3'
import { useEffect, useState } from 'react'
import Bar from './Bar'

const margin = {
  top: 30,
  right: 30,
  bottom: 30,
  left: 30,
}

const width = 960
const height = 500

const innerWidth = width - margin.left - margin.right
const innerHeight = height - margin.top - margin.bottom

const MissingDeathBar = () => {
  const [data, setData] = useState([])
  const [binnedData, setBinnedData] = useState([])

  const xValue = (d) => d['Reported Date']
  const xAxisLabel = 'Time'

  const yValue = (d) => d['Total Dead and Missing']
  const yAxisLabel = 'Total Dead and Missing'

  const xScale = scaleTime().domain(extent(data, xValue)).range([0, innerWidth])

  // const yScale = scaleLinear()
  //   .domain(extent(data, yValue))
  //   .range([innerHeight, 0])

  const [start, stop] = xScale.domain()

  // group by months by bin function

  const ySacle = scaleLinear()
    .domain([0, max(binnedData, (d) => d.y)])
    .range([innerHeight, 0])

  useEffect(() => {
    csv('/data/MissingMigrants-Global-2021-03-27T05-02-23.csv', (d) => {
      return {
        date: new Date(d['Reported Date']),
        total: parseFloat(d['Total Dead and Missing']),
        coordinate: d['Location Coordinates'],
      }
    }).then((responseData) => {
      setData((state) => [...responseData])
    })
  }, [])

  useEffect(() => {
    if (data.length) {
      const _binnedData = bin()
        .value(xValue)
        .domain(xScale.domain())
        .thresholds(timeMonths(start, stop))(data)
        .map((array) => {
          return {
            y: sum(array, yValue),
            x0: array.x0,
            x1: array.x1,
          }
        })

      console.log(_binnedData)
      // setBinnedData(bi)
    }
  }, [data])

  return (
    <div>
      <svg width={width} height={height}>
        {binnedData.map((d) => {
          console.log(xScale(d.x1), xScale(d.x0))
          return (
            <rect
              className="mark"
              x={xScale(d.x0)}
              y={ySacle(d.y)}
              width={xScale(d.x1) - xScale(d.x0)}
              height={innerHeight - ySacle(d.y)}
            >
              <title>{d.y}</title>
            </rect>
          )
        })}
      </svg>
      {/* <Bar data={data} /> */}
    </div>
  )
}

export default MissingDeathBar
